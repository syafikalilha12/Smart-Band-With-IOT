#include <ESP8266HTTPClient.h>
#include <BlynkSimpleEsp8266.h>
#include <SimpleTimer.h>
#define BLYNK_PRINT Serial
#include <Blynk.h>
#include <time.h>
#include <ESP8266WiFi.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "MAX30105.h"
#include "spo2_algorithm.h"
#include <Adafruit_MLX90614.h>
#include <DHT.h>
#define PIN D5
#define TYPE DHT11
DHT dht(PIN,TYPE);
int te,tt;
Adafruit_MLX90614 mlx = Adafruit_MLX90614();

MAX30105 particleSensor;
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
#define NUMFLAKES 10
#define LOGO_HEIGHT 16
#define LOGO_WIDTH 16
#define button D5
String jam;

const unsigned char myBitmap[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xe0, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x0f, 0xf8, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3f, 0xff, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7f, 0xf8, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7f, 0xc0, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x3e, 0x7f, 0x80, 0x00, 0x3f, 0x8f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x7f, 0x07, 0x07, 0xf8, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xff, 0x07, 0x0f, 0xfe, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xff, 0x06, 0x1f, 0xff, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0xff, 0x06, 0x1f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0xfe, 0x0e, 0x1f, 0xff, 0xc0, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0f, 0xfe, 0x0f, 0x0f, 0xff, 0x00, 0x3f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0f, 0xfc, 0x1f, 0x87, 0xfc, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0f, 0xfc, 0x3f, 0xe0, 0x00, 0x7e, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0f, 0xf8, 0xff, 0xe0, 0x01, 0xff, 0x81, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0f, 0xe1, 0xff, 0xf0, 0x01, 0xff, 0xe0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0f, 0xc3, 0xff, 0xf8, 0x03, 0xff, 0xf0, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x07, 0x07, 0xff, 0xfe, 0x0f, 0xff, 0xf8, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0xff, 0xff, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0xff, 0xf0, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0xff, 0xc0, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0f, 0xff, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x07, 0xfe, 0x03, 0xf8, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x03, 0xf8, 0x0f, 0xfc, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1f, 0xff, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x1f, 0x83, 0xfc, 0x7f, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7f, 0xef, 0xfc, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x60, 0x7c, 0x07, 0xc0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x7c, 0x0f, 0x80, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x7c, 0xff, 0x80, 0xdf, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x7c, 0x01, 0x80, 0xc0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x60, 0x7c, 0x01, 0x80, 0xc0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7f, 0xef, 0xfd, 0x80, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x7f, 0x81, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

const unsigned char meka [] PROGMEM = {
  0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf1, 0x80, 0x00, 0x00, 0x00, 0x18, 0x0f, 0xfb, 0xc0, 
  0x00, 0x00, 0x00, 0xc0, 0x00, 0xff, 0xe0, 0x00, 0x01, 0x03, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x02, 
  0x84, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x06, 0x40, 0x00, 0x00, 0x47, 0xfc, 0x00, 0x04, 0x30, 0x00, 
  0x00, 0x73, 0xfc, 0x00, 0x08, 0x08, 0x00, 0x00, 0x89, 0xfc, 0x00, 0x04, 0x04, 0x00, 0x01, 0x04, 
  0xf8, 0x00, 0x00, 0x02, 0x00, 0x02, 0x04, 0x78, 0x00, 0x04, 0x01, 0x00, 0x04, 0x04, 0x7c, 0x00, 
  0x04, 0x00, 0x80, 0x08, 0x04, 0x3c, 0x00, 0x08, 0x00, 0x40, 0x08, 0x04, 0x1e, 0x00, 0x08, 0x60, 
  0x20, 0x10, 0x04, 0x1e, 0x00, 0x08, 0x70, 0x10, 0x20, 0x04, 0x1e, 0x00, 0x00, 0x58, 0x08, 0x41, 
  0x84, 0x0f, 0x00, 0x60, 0x4c, 0x0c, 0x82, 0x84, 0x0f, 0xe0, 0x00, 0x86, 0x07, 0x06, 0x84, 0x0f, 
  0xe0, 0x80, 0x83, 0x03, 0x0c, 0x84, 0x0f, 0xe0, 0x80, 0x81, 0x80, 0x18, 0x84, 0x0f, 0xe0, 0x80, 
  0x80, 0x40, 0x30, 0x84, 0x0f, 0xe0, 0x80, 0x80, 0x60, 0x20, 0x84, 0x0f, 0xe0, 0x80, 0x80, 0x30, 
  0x40, 0x84, 0x0f, 0xe0, 0x80, 0x80, 0x08, 0x80, 0x84, 0x0f, 0xe0, 0x00, 0x80, 0x05, 0x00, 0x84, 
  0x0f, 0xe0, 0x70, 0x40, 0x02, 0x00, 0x84, 0x0f, 0xe0, 0x10, 0x40, 0x00, 0x00, 0x84, 0x0f, 0x00, 
  0x08, 0x40, 0x00, 0x00, 0x84, 0x0f, 0x00, 0x08, 0x20, 0x00, 0x00, 0x84, 0x1e, 0x00, 0x08, 0x10, 
  0x00, 0x00, 0x84, 0x1e, 0x00, 0x00, 0x18, 0x00, 0x00, 0x84, 0x3e, 0x00, 0x04, 0x08, 0x00, 0x00, 
  0x84, 0x3c, 0x00, 0x00, 0x04, 0x00, 0x00, 0x84, 0x7c, 0x00, 0x08, 0x02, 0x00, 0x00, 0xfc, 0x78, 
  0x00, 0x08, 0x01, 0x80, 0x00, 0x00, 0xfc, 0x00, 0x04, 0x01, 0x80, 0x00, 0x01, 0xfe, 0x00, 0x02, 
  0x03, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x01, 0x06, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x8c, 0x00, 
  0x00, 0x1f, 0xf8, 0x00, 0x00, 0x51, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x20, 0x60, 0x01, 0xff, 
  0xe0, 0x00, 0x00, 0x00, 0x1f, 0x3f, 0xf9, 0xc0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xe1, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x4a, 0x3a, 0x4d, 0xd4, 0xe9, 0x5d, 0x40, 0x7b, 0xa3, 0xc4, 0x95, 0x2d, 0x51, 0x80, 0x2a, 
  0x22, 0x5c, 0x95, 0x2b, 0x54, 0x40, 0x0b, 0x98, 0x52, 0x90, 0xc8, 0x4c, 0xc0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0x4b, 0xa8, 0xee, 0xea, 0x1c, 0x00, 0x02, 0x68, 0x2c, 0xc8, 0xab, 
  0x20, 0x00, 0x04, 0x58, 0xaa, 0x88, 0xaa, 0xa4, 0x00, 0x03, 0x4b, 0xaa, 0x6e, 0xaa, 0x98, 0x00
};

const unsigned char company [] PROGMEM = {
  0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0xfb, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xf9, 0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xf0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xe0, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xe0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xc0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0f, 0x81, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0x81, 0xf3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0x03, 0xe7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x3e, 0x07, 0xc7, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7c, 0x0f, 0xc7, 0xc0, 0x00, 0x0f, 0xf1, 0xf8, 0x08, 0x11, 0xf8, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xfc, 0x0f, 0x83, 0xe0, 0x00, 0x0f, 0xf3, 0xfc, 0x08, 0x13, 0xfc, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xf8, 0x1f, 0x03, 0xf0, 0x00, 0x08, 0x02, 0x0c, 0x08, 0x12, 0x04, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0xf0, 0x3e, 0x01, 0xf0, 0x00, 0x08, 0x06, 0x04, 0x08, 0x16, 0x06, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xf0, 0x3e, 0x00, 0xf8, 0x00, 0x08, 0x06, 0x04, 0x08, 0x16, 0x06, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0xe0, 0x7c, 0x00, 0xfc, 0x00, 0x0f, 0xe6, 0x04, 0x0f, 0xf6, 0x06, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xc0, 0xf8, 0x00, 0x7c, 0x00, 0x0f, 0xf7, 0xfc, 0x0f, 0xf7, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xc0, 0xf0, 0x00, 0x3e, 0x00, 0x00, 0x37, 0xfc, 0x08, 0x17, 0xfe, 0x00, 0x00, 0x00, 0x00, 
  0x08, 0x81, 0xf0, 0x00, 0x3f, 0x00, 0x00, 0x36, 0x04, 0x08, 0x16, 0x06, 0x00, 0x00, 0x00, 0x00, 
  0x19, 0x03, 0x60, 0x80, 0x1f, 0x80, 0x00, 0x36, 0x04, 0x08, 0x16, 0x06, 0x00, 0x00, 0x00, 0x00, 
  0x3f, 0x02, 0x21, 0x80, 0x0f, 0x80, 0x0f, 0xf6, 0x04, 0x08, 0x16, 0x06, 0x00, 0x00, 0x00, 0x00, 
  0x3e, 0x04, 0x43, 0xc0, 0x0f, 0xc0, 0x0f, 0xe6, 0x04, 0x08, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 
  0x7c, 0x08, 0x42, 0xe0, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x7c, 0x04, 0x42, 0x20, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xf8, 0x02, 0x21, 0x10, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xf0, 0x02, 0x01, 0x18, 0x01, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xf0, 0x01, 0xc0, 0x88, 0x01, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xf8, 0x00, 0xf0, 0x44, 0x01, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x7c, 0x00, 0xf8, 0x7e, 0x02, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x7c, 0x00, 0x7c, 0x3e, 0x07, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x3e, 0x00, 0x3e, 0x1f, 0x0f, 0xc0, 0x03, 0xf0, 0xf8, 0x1c, 0x70, 0xfc, 0x1f, 0x03, 0xe0, 0x02, 
  0x3f, 0x00, 0x3c, 0x1f, 0x0f, 0x80, 0x07, 0xf9, 0xfe, 0x3f, 0xf9, 0xfe, 0x3f, 0x8f, 0xf3, 0x02, 
  0x1f, 0x00, 0x18, 0x3e, 0x1f, 0x80, 0x0c, 0x01, 0x86, 0x63, 0x99, 0x02, 0x70, 0xcc, 0x3b, 0x02, 
  0x0f, 0x80, 0x08, 0x7c, 0x3f, 0x00, 0x08, 0x03, 0x02, 0x63, 0x09, 0x03, 0x60, 0x48, 0x1b, 0x02, 
  0x0f, 0xc0, 0x00, 0x7c, 0x3e, 0x00, 0x08, 0x03, 0x02, 0x43, 0x09, 0x03, 0x60, 0x48, 0x1b, 0x02, 
  0x07, 0xc0, 0x00, 0xf8, 0x7c, 0x00, 0x08, 0x03, 0x02, 0x43, 0x09, 0x03, 0x60, 0x48, 0x19, 0x86, 
  0x03, 0xe0, 0x01, 0xf0, 0xfc, 0x00, 0x08, 0x03, 0x02, 0x43, 0x09, 0x03, 0x7f, 0xc8, 0x19, 0xfe, 
  0x03, 0xf0, 0x01, 0xf0, 0xf8, 0x00, 0x08, 0x03, 0x02, 0x43, 0x09, 0xfe, 0x7f, 0xc8, 0x18, 0x02, 
  0x01, 0xf0, 0x03, 0xe1, 0xf0, 0x00, 0x08, 0x03, 0x02, 0x43, 0x09, 0xfc, 0x60, 0x48, 0x18, 0x02, 
  0x00, 0xf8, 0x07, 0xc3, 0xf0, 0x00, 0x0c, 0x03, 0x02, 0x43, 0x09, 0x00, 0x60, 0x48, 0x18, 0x02, 
  0x00, 0xfc, 0x0f, 0x83, 0xe0, 0x00, 0x0f, 0xf1, 0xbe, 0x43, 0x09, 0x00, 0x60, 0x48, 0x19, 0xfe, 
  0x00, 0x7e, 0x0f, 0x87, 0xc0, 0x00, 0x07, 0xf9, 0xfc, 0x43, 0x09, 0x00, 0x60, 0x48, 0x1b, 0xfc, 
  0x00, 0x3e, 0x1f, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0x3e, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1e, 0x3e, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0e, 0x7c, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x04, 0xf8, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xf8, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xf0, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xf9, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x07, 0xfb, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x08, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#define MAX_BRIGHTNESS 255
#if defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__)
uint16_t irBuffer[100];
uint16_t redBuffer[100];
#else
uint32_t irBuffer[100];
uint32_t redBuffer[100];
#endif
int32_t bufferLength;
int32_t spo2;
int8_t validSPO2;
int32_t heartRate;
int8_t validHeartRate;

unsigned long previousMillis = 0;
const long period = 4000;
unsigned long previousMillis1 = 0; //will store last time LED was blinked
const long period1 = 8000;
char auth[] = "uP5DVLZKHumKZU2B-uexnDsBeD7ZNHGe";
const char *ssid = "AndroidAP8201";
const char *password = "qwertyuiop1";
int mode = 0;
byte readLED = D4;
byte pulseLED = D1;


WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "asia.pool.ntp.org", 28200, 60000);
String weekDays[7] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
String months[12] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};

void time()
{
  timeClient.update();
  unsigned long epochTime = timeClient.getEpochTime();
  String formattedTime = timeClient.getFormattedTime();
  Serial.print("Formatted Time: ");
  Serial.println(formattedTime);
  int currentHour = timeClient.getHours();
  int currentMinute = timeClient.getMinutes();
  int currentSecond = timeClient.getSeconds();

  String weekDay = weekDays[timeClient.getDay()];
  struct tm *ptm = gmtime((time_t *)&epochTime);
  int monthDay = ptm->tm_mday;
  int currentMonth = ptm->tm_mon + 1;
  String currentMonthName = months[currentMonth - 1];
  int currentYear = ptm->tm_year + 1900;
  String currentDate = String(currentYear) + "-" + String(currentMonth) + "-" + String(monthDay);
  display.display();
  display.clearDisplay();
  display.setTextSize(3);
  display.setTextColor(WHITE);
  display.setCursor(20, 0);
  display.print(currentHour);
  display.print(":");
  display.println(currentMinute);
  jam = String(currentHour) + ":" + String(currentMinute) + ":" + String(currentSecond);

  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(5, 30);
  display.print(weekDay);
  display.print("/");
  display.print(monthDay);
  display.print("-");
  display.print(currentMonth);
  display.print("-");
  display.println(currentYear);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(20, 40);
  display.print("Surabaya  35'");
  Serial.print("Current date: ");
  Serial.println(currentDate);
  Serial.println("");
}

void time1()
{
  tt=dht.readTemperature();
  if(isnan(tt) || tt>50)
  {
    te=te;
  }
  else
  {
    te=tt;
  }
  timeClient.update();
  unsigned long epochTime = timeClient.getEpochTime();
  String formattedTime = timeClient.getFormattedTime();
  Serial.print("Formatted Time: ");
  Serial.println(formattedTime);
  int currentHour = timeClient.getHours();
  int currentMinute = timeClient.getMinutes();
  int currentSecond = timeClient.getSeconds();

  String weekDay = weekDays[timeClient.getDay()];
  struct tm *ptm = gmtime((time_t *)&epochTime);
  int monthDay = ptm->tm_mday;
  int currentMonth = ptm->tm_mon + 1;
  String currentMonthName = months[currentMonth - 1];
  int currentYear = ptm->tm_year + 1900;
  String currentDate = String(currentYear) + "-" + String(currentMonth) + "-" + String(monthDay);
  display.display();
  display.clearDisplay();
  display.setTextSize(3);
  display.setTextColor(WHITE);
  display.setCursor(20, 0);
  display.print(currentHour);
  display.print(":");
  display.println(currentMinute);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 30);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 40);
  display.print("SUHU TUBUH: ");
  display.print(te);
  display.setTextColor(WHITE);
  display.setCursor(0, 55);
  display.print("HR");
  display.print(heartRate, DEC);
  display.print("Bpm");
  display.print(" SpO2:");
  display.print(spo2, DEC);
  display.print("%");
}

void Displayconnect()
{
  display.display();
  delay(100); //OLED
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.println(F("Connecting to wifi.."));
  display.setTextSize(3);
  display.setTextColor(WHITE);
  display.setCursor(10, 15);
  display.print("SYAFIK");
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(10, 50);
  display.print("NRP 3110181057");
}

void setup()
{
  Serial.begin(115200);
  pinMode(button, INPUT_PULLUP);
  pinMode(readLED, OUTPUT);
  pinMode(pulseLED, OUTPUT);
  mlx.begin();
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C))
  {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;)
      ;
  }
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //or 0x3C
  display.clearDisplay();                    //for Clearing the display
  display.drawBitmap(27, 0, myBitmap, 128, 64, WHITE);
  display.display();
  delay(2000);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //or 0x3C
  display.clearDisplay();                    //for Clearing the display
  display.drawBitmap(40, 0, meka, 51, 64, WHITE);
  display.display();
  delay(2000);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //or 0x3C
  display.clearDisplay();                    //for Clearing the display
  display.drawBitmap(0, 0, company, 128, 64, WHITE);
  display.display();
  delay(2000);
  display.clearDisplay();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
    Displayconnect();
  }
  timeClient.begin();
  timeClient.setTimeOffset(25200);

  if (!particleSensor.begin(Wire, I2C_SPEED_FAST))
  {
    Serial.println(F("MAX30105 was not found. Please check wiring/power."));
    while (1)
      ;
  }
  byte ledBrightness = 60;
  byte sampleAverage = 4;
  byte ledMode = 2;
  byte sampleRate = 100;
  int pulseWidth = 411;
  int adcRange = 4096;

  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange);
  bufferLength = 100;
  for (byte i = 0; i < bufferLength; i++)
  {
    while (particleSensor.available() == false)
      particleSensor.check();

    redBuffer[i] = particleSensor.getRed();
    irBuffer[i] = particleSensor.getIR();
    particleSensor.nextSample();
    Serial.print(F("red="));
    Serial.print(redBuffer[i], DEC);
    Serial.print(F(", ir="));
    Serial.println(irBuffer[i], DEC);
    display.display();
    delay(100);
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);
    display.println(F("Getting Parameters"));
    display.setTextSize(3);
    display.setTextColor(WHITE);
    display.setCursor(20, 20);
    display.print(irBuffer[i], DEC);
  }
  Blynk.begin(auth, ssid, password);
}
void pb_mode()
{
  if (digitalRead(button) == 0)
    mode = 1;
}

void loop()
{
awal:
  pb_mode();
  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);

  for (byte i = 25; i < 100; i++)
  {
    redBuffer[i - 25] = redBuffer[i];
    irBuffer[i - 25] = irBuffer[i];
  }
  for (byte i = 75; i < 100; i++)
  {
    while (particleSensor.available() == false)
      particleSensor.check();
    redBuffer[i] = particleSensor.getRed();
    irBuffer[i] = particleSensor.getIR();
    particleSensor.nextSample();

    unsigned long currentMillis = millis();
    if (currentMillis - previousMillis >= period)
    {
      previousMillis = currentMillis;
      digitalWrite(readLED, !digitalRead(readLED));
      Serial.print(F(", SPO2=  "));
      Serial.println(spo2, DEC);
      Serial.print(F(", HR=  "));
      Serial.println(heartRate, DEC);
      time1();
      maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
    }
     if (currentMillis - previousMillis1 >= period1)
      {
      previousMillis1 = currentMillis;
      time();
      }
  }
  mode = 0;
  pb_mode();
  goto awal;
}
